// projects.proto
syntax = "proto3";

import "common.proto";
import "google/protobuf/empty.proto";


// Enums


// Types
message Framework {
    string frameworkId = 1;
    string icon = 2;
    string displayName = 3; 
    string defaultBuildCommand = 4;
    string defaultProdCommand = 5;
    string runtime = 6;
    string name = 7;
    string applicationType = 8;
}

message Repository {
    string repositoryId = 1;
    string projectId = 2;
    string githubRepoId = 3;
    string githubRepoFullName = 4;
    string githubRepoURI = 5;
    string createdAt = 6;
    string updatedAt = 7;
    string githubInstallationId = 8;
    string branch = 9;
}

message Deployment {
    string deploymentId = 1;
    string commitHash = 2;
    string status = 3;
    string commitMessage = 4;
    string author = 5;
    string projectId = 6;
    string repositoryId = 7;
    string createdAt = 8;
    string lastDeployedAt = 9;
    repeated BuildEnvironment buildEnvironment = 10;
    repeated RuntimeEnvironment runtimeEnvironment = 11;
}

message BuildEnvironment {
    string buildId = 1;
    string startedAt = 2;
}

message RuntimeEnvironment {
    string runtimeId = 1;
    string startedAt = 2;
}

message Project {
    string projectId = 1;
    string name = 2;
    Framework framework = 3;
    string domain = 4;
    string buildCommand = 5;
    string prodCommand = 6;
    string createdAt = 7;
    string updatedAt = 8;
    Repository repository = 9;
    string outDir = 10;
    repeated EnvironmentVariablesKeyValue environmentVariables = 11;
    repeated Deployment deployments = 12;
}

message EnvironmentVariables {
    string projectId = 1;
    string name = 2;
    string value = 3;
}


message GithubRepository {
    string githubRepoId = 1;
    string githubRepoName = 2;
    string githubRepoFullName = 3;
    string githubRepoURI = 4;
    string githubRepoDefaultBranch = 5;
    bool githubRepoPrivate = 6;
}

message GithubInstallation {
    string githubInstallationId = 1;
    string userId = 2;
    string githubUserName = 3;
    string createdAt = 4;
    string updatedAt = 5;
}

message ProjectUpdates {
     string name = 1;
     string domain = 2;
     string prodCommand = 3;
     string buildCommand = 4;
     message framework {
         string frameworkId = 1;
         string buildCommand = 2;
         string prodCommand = 3;
     }
     string outDir = 5;
}

// Requests

message CreateProjectRequest {
    User authUserData = 1;
    string name = 2;
    string githubRepoId = 3;
    string githubRepoFullName = 4;
    string githubRepoURI = 5;
    string frameworkId = 6;
    string buildCommand = 7;
    string prodCommand = 8;
    string branch = 9;
    string outDir = 10;
    repeated EnvironmentVariablesKeyValue environmentVars = 11;
    string domain = 12;
    RequestMeta reqMeta= 13;
}

message UpdateProjectRequest {
    User authUserData = 1;
    string projectId = 2;
    ProjectUpdates updates = 3;
    RequestMeta reqMeta= 4;
}

message GetRepositoryRequest {
    User authUserData = 1;
    string projectId = 2;
    RequestMeta reqMeta = 3;
}

message GetAllUserProjectsRequest {
    User authUserData = 1;
    int64 skip = 2;
    int32 limit = 3;
    RequestMeta reqMeta = 4;
}

message DeleteProjectRequest {
    User authUserData = 1;
    string projectId = 2;
    RequestMeta reqMeta = 3;
}

message GetProjectRequest {
    User authUserData = 1;
    string projectId = 2;
    RequestMeta reqMeta = 3;
}

message GetAllDeploymentsRequest {
    User authUserData = 1;
    string projectId = 2;
    int64 skip = 3;
    int32 limit = 4;
    RequestMeta reqMeta = 5;
}

message RedeployRequest {
    User authUserData = 1;
    string deploymentId = 2;
    string projectId = 3;
    RequestMeta reqMeta = 4;
}

message DeleteDeploymentRequest {
    User authUserData = 1;
    string deploymentId = 2;
    string projectId = 3;
    RequestMeta reqMeta = 4;
}

message GetDeploymentRequest {
    User authUserData = 1;
    string projectId = 2;
    string deploymentId = 3;
    RequestMeta reqMeta = 4;
}

message UpsertEnvVarsRequest {
    User authUserData = 1;
    string projectId = 2;
    repeated EnvironmentVariablesKeyValue envs = 3;
    RequestMeta reqMeta = 4;
}

message DeleteEnvVarsRequest {
    User authUserData = 1;
    string projectId = 2;
    string name = 3;
    RequestMeta reqMeta = 4;
}

message CreateRepositoryRequest {
    User authUserData = 1;
    string githubRepoId = 2;
    string projectId = 3;
    string branch = 4;
    RequestMeta reqMeta = 5;
}

message UpdateRepositoryRequest {
    User authUserData = 1;
    string projectId = 2;
    message updates {
        string branch = 3;
        message github {
          string githubRepoId = 1;
          string githubRepoURI = 2;
          string githubRepoFullName = 3;
        }
    }
    RequestMeta reqMeta = 4;
}

message DeleteRepositoryRequest {
    User authUserData = 1;
    string projectId = 2;
    RequestMeta reqMeta = 3;
}

message GetEnvVarsRequest {
    User authUserData = 1;
    string projectId = 2;
    RequestMeta reqMeta = 3;
}

message GetUserGithubReposRequest {
    User authUserData = 1;
    int64 skip = 2;
    int32 limit = 3;
    RequestMeta reqMeta = 4;
}

message GetGithubRepoRequest {
    User authUserData = 1;
    string githubRepoId = 2;
    RequestMeta reqMeta = 3;
}

message GithubWebhookRequest {
    string payload = 1;
    string signature = 2;
    string eventType = 3;
    RequestMeta reqMeta = 4;
}

message CreateGithubInstallationRequest {
    User authUserData = 1;
    string installation_id = 2;
    RequestMeta reqMeta = 3;
}

message IGetProjectRequest {
    string projectId = 1;
    string domain = 2;
    RequestMeta reqMeta = 3;
}

message IGetProjectByDomainRequest {
    string domain = 1;
    RequestMeta reqMeta = 2;
}



// Responses
message ProjectResponse {
    int32 code = 1;
    string message = 2;
    Project res = 3;
}

message AllProjectsResponse {
    int32 code = 1;
    string message = 2;
    repeated Project res = 3;
}

message DeploymentResponse {
    int32 code = 1;
    string message = 2;
    Deployment res = 3;
}

message AllDeploymentsResponse {
    int32 code = 1;
    string message = 2;
    repeated Deployment res = 3;
}

message EnvVarsResponse {
    int32 code = 1;
    string message = 2;
    repeated EnvironmentVariables res = 3;
}

message UpsertEnvVarsResponse {
    int32 code = 1;
    string message = 2;
}

message RepositoryResponse {
    int32 code = 1;
    string message = 2;
    Repository res = 3;
}

message FrameworkResponse {
    int32 code = 1;
    string message = 2;
    repeated Framework res = 3;
}

message AllGithubReposResponse {
    int32 code = 1;
    string message = 2;
    repeated GithubRepository res = 3;
}

message GithubRepoResponse {
    int32 code = 1;
    string message = 2;
    GithubRepository res = 3;
}

message DeleteEnvVarsResponse {
    int32 code = 1;
    string message = 2;
    EnvironmentVariables res = 3;
}

message IGetGithubRepoAccessTokenRequest {
    string githubRepoId = 1;
    RequestMeta reqMeta = 2;
}

message IGetGithubRepoAccessTokenResponse {
    int32 code = 1;
    string message = 2;
    string res = 3;
}

message GithubInstallationResponse {
    int32 code = 1;
    string message = 2;
    GithubInstallation res = 3;
}

message StaleEnvironmentIdsResponse {
    int32 code = 1;
    string message = 2;
    repeated string res = 3;
}

// Service
service ProjectsService {
    // Project
    rpc CreateProject (CreateProjectRequest) returns (ProjectResponse);
    rpc GetProject (GetProjectRequest) returns (ProjectResponse);
    rpc GetAllUserProjects (GetAllUserProjectsRequest) returns (AllProjectsResponse);
    rpc UpdateProject (UpdateProjectRequest) returns (ProjectResponse);
    rpc DeleteProject (DeleteProjectRequest) returns (ProjectResponse);

    // Deployment
    rpc GetDeployment (GetDeploymentRequest) returns (DeploymentResponse);
    rpc GetAllDeployments (GetAllDeploymentsRequest) returns (AllDeploymentsResponse);
    rpc DeleteDeployment (DeleteDeploymentRequest) returns (DeploymentResponse);
    rpc Redeploy (RedeployRequest) returns (DeploymentResponse);

    // Environment Variables
    rpc UpsertEnvVars (UpsertEnvVarsRequest) returns (UpsertEnvVarsResponse);
    rpc DeleteEnvVars (DeleteEnvVarsRequest) returns (DeleteEnvVarsResponse);
    rpc GetEnvVars (GetEnvVarsRequest) returns (EnvVarsResponse);

    // Repository
    rpc GetRepository (GetRepositoryRequest) returns (RepositoryResponse);
    rpc UpdateRepository (UpdateRepositoryRequest) returns (RepositoryResponse);
    rpc CreateRepository (CreateRepositoryRequest) returns (RepositoryResponse);
    rpc DeleteRepository (DeleteRepositoryRequest) returns (RepositoryResponse);

    // Github Repository
    rpc GetUserGithubRepos (GetUserGithubReposRequest) returns (AllGithubReposResponse);
    rpc GetGithubRepo (GetGithubRepoRequest) returns (GithubRepoResponse);
    rpc GetGithubInstallation (BodyLessRequest) returns (GithubInstallationResponse);

    rpc GetFrameworks (BulkResourceRequest) returns (FrameworkResponse);

    //webhooks
    rpc GithubWebhook (GithubWebhookRequest) returns (google.protobuf.Empty);
    rpc CreateGithubInstallation (CreateGithubInstallationRequest) returns (google.protobuf.Empty);

    
    //internal rpcs
    rpc IGetGithubRepoAccessToken (IGetGithubRepoAccessTokenRequest) returns (IGetGithubRepoAccessTokenResponse);
    rpc IGetProject (IGetProjectRequest) returns (ProjectResponse);
    rpc IGetStaleEnvironmentIds (InternalEmptyRequest) returns (StaleEnvironmentIdsResponse);
}
