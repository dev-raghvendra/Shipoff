generator client {
  provider = "prisma-client-js"
  output   = "./generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProjectType {
  STATIC
  DYNAMIC
}

model Project {
  projectId              String      @id @default(uuid())
  name                   String  
  description            String?     @default("No description provided")
  domain                 String      @unique
  prodCommand            String?     @default("N/A")
  buildCommand           String      
  frameworkId            String
  createdAt              DateTime?   @default(now())
  updatedAt              DateTime?   @updatedAt
  framework              Framework   @relation(fields: [frameworkId], references: [frameworkId])
  outDir                 String      

  repository             Repository ?
  deployments            Deployment[]
  environmentVariables   EnvironmentVariable[]
}

model GithubInstallation {
  githubInstallationId String @id
  userId               String @unique
  githubUserName       String
  createdAt            DateTime? @default(now())
  updatedAt            DateTime? @updatedAt

  repositoryConfigs    Repository[]
}

model Framework {
  frameworkId           String   @id @default(uuid())
  icon                  String
  name                  String   @unique
  displayName           String   @unique
  keywordName           String   @unique
  applicationType       ProjectType
  defaultBuildCommand   String
  defaultProdCommand    String?  @default("N/A")
  runtime               Runtime  
  defaultOutDir         String

  project         Project[]
}



model Repository {
  repositoryId           String      @id @default(uuid())
  githubInstallationId   String 
  githubRepoFullName     String      @unique
  githubRepoId           String      @unique
  githubRepoURI          String      @unique
  projectId              String      @unique
  branch                 String?     @default("main")
  rootDir                String?     @default("/")
  createdAt              DateTime?   @default(now())
  updatedAt              DateTime?   @updatedAt



  deployments            Deployment[]
  project                Project @relation(fields: [projectId], references: [projectId], onDelete: Cascade)
  githubInstallation     GithubInstallation @relation(fields: [githubInstallationId], references: [githubInstallationId], onDelete:setNull)
}


model Deployment {
  deploymentId    String           @id @default(uuid())
  commitHash      String           @unique
  status          DeploymentStatus @default(QUEUED)
  createdAt       DateTime         @default(now())
  completedAt     DateTime?
  updatedAt       DateTime         @updatedAt
  commitMessage   String
  author          String
  projectId       String
  repositoryId    String ?
  lastDeployedAt  DateTime?

  buildEnvironment  BuildEnvironment[]
  runtimeEnvironment  RuntimeEnvironment[]
  project         Project          @relation(fields: [projectId], references: [projectId], onDelete: Cascade)
  repository      Repository ?      @relation(fields: [repositoryId], references: [repositoryId], onDelete: SetNull)
}

model BuildEnvironment{
  buildId       String    @id @default(uuid())
  deploymentId  String
  startedAt     DateTime? @default(now())
  active        Boolean   @default(true)

  deployment    Deployment @relation(fields: [deploymentId], references: [deploymentId], onDelete:Cascade)
}

model RuntimeEnvironment{
  runtimeId     String    @id @default(uuid())
  deploymentId  String
  startedAt     DateTime? @default(now())
  active        Boolean   @default(true)

  deployment    Deployment @relation(fields: [deploymentId], references: [deploymentId], onDelete:Cascade)
}

model EnvironmentVariable {
  projectId  String
  name    String
  value   String

  project    Project @relation(fields: [projectId], references: [projectId], onDelete: Cascade)

  @@id([projectId, name])
}

enum DeploymentStatus {
  QUEUED
  INACTIVE
  FAILED
  PRODUCTION
  BUILDING
  PROVISIONING
}

enum Runtime {
  NODEJS
  PYTHON
  PHP
}
